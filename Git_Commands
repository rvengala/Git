
## Imortant Notes
    - VCS 
    
              Server  Reporsirty    ->  Local repository       ->   Working Copy
              

## 
       Working Directory                Stagingg Directory          Local repo                      remote Repo
      
                    ------->    git Add ------> 
                    
                                                    ----->  Git Commit ---->  
                                                    
                                                                          ----------> Git Push  ----------> 
                                                                              
                                                                          <---------- Git Pull  ---------- 
                  
                <------------------------------- Git Checkout --------------        
    
                <------------------------------- Git merge ------------------
                
                
                
  # Git Install 
          yum install git -y 
          
#### 
mkdir -p ~/git-demo/project
cd ~/git-demo/project
echo "<h>This is my first Git file</h>"  >> index1.html

#### 
git init                #// This will initiize 
git config --global user.name "vengala"
git config --global user.email "vengala@gmail.com"
git commit -a -m "Comment"      // This will commit from Working to LR 



####
git status
        # On branch master
        #
        # Initial commit
        #
        # Untracked files:
        #   (use "git add <file>..." to include in what will be committed)
        #
        #       index.html
        nothing added to commit but untracked files present (use "git add" to track

#### Git Add/remove
git add index1.html 
git reset HEAD index1.html              #// Remove only from Stagit directory 
git rm  --cached index1.html            #// Remove from Git Stagit or Local commited files


#### Git Commit
git commit -m "first Commmmit"
    [master (root-commit) d92f3c0] first Commmmit
     1 file changed, 1 insertion(+)
     create mode 100644 index1.html




###
git status
        # On branch master
        #
        # Initial commit
        #
        # Changes to be committed:
        #   (use "git rm --cached <file>..." to unstage)
        #
        #       new file:   index1.html

###
ls                  // Linux command 
git ls-files        // Git Ls commands
git status 
git log 
git log --oneline 
 
### diff coommands
git diff file1.txt
git diff --staged file1.txt

### Remove Commands
git rm file1.txt          // Remove from Working, Staged, Local
git status

git rm file1.txt
    error: 'file1.txt' has staged content different from both the file and the HEAD
    (use -f to force removal)

git rm -f file1.txt
    rm 'file1.txt'
    $ ls
    index1.html  index2.html  index.html
    
git rm --cached index2.html   // remove file from only Local, it wont delete from working

#### Ignoore file Track
vim .gitignore                  // Add file named which you dont want to tracked


### Git Revert/undo 
git log --oneline
git revert <commit ID>


# Head   -- head is tthe Pointer in Git

### Reset  -- Distructive Commands  *** This is very  power full command, this old commits 
git reset --hard <commit3>       // This will delete commit2 & commit1  --> 
commit1   <-- HEAD 
commit2
commit3   <-- HEAD After rebase COmmit 
commit4

### 

### BRANCHING COMMANDS/STRATEGY 
================================
git status
git branch 
git checkout -b b1 master  or git checkout b1     (-b create new branch)
git log --onleine b1
git log --oneline master
git merge <Source> <Destination>    //If Distination is master no need to metion. 
    On Mater : git merge b1   or git merge b1 master  
    On b1 : git b1 merge   or git merge master   

#### Stashing/Unstashing       
        # Stashing      ## // Stashing move the code to Temporory Shelves from Working Directory
        git stash 
        git stash list
        git show <Stash Number ex:stash@{0}>
        
        # Unstashing    ## // Un Stashing move the code from Temporory Shelves working Working Directory
        git stash pop <stash num ex:stash@{0}>
        
        # Clear Stash
        git stash clear 
        
        # Partial Stashing 
        git stash -p
        git stash pop <stash number> or git stash apply <stash number>
        
        # Delete perticulat Stash 
        git stash drop "stash@{0}" 
        
## Rebase
git checkout master
git log --oneline
git reset --hard <Last but one commit number>
git log --oneline

git checout -b b2 
git log --oneline b2

git checkout master
vim index3.html
git add index3.html
git commit -m "master - C"  


git checkot b2
vim index4.html
git add index4.html
git commit -m "b2 - D"

git log --oneline master
git log --oneline b2

git brach     # it should on b2 branch  
git rebase master 

git log --oneline master        # Log of Master should be same
git log --oneline b2            # Log of b2 should be changed, c should insert between B & D















  
